---
import { Audios, Artista, Album, Usuario, Album_Audio, Normal, Playlist } from 'astro:db';
import { db, eq, and } from 'astro:db';
import { getUserActivo } from './Cookies/Cookies.astro';
import { Playlist_Audio } from 'astro:db';

const audios = (
    await db.select().from(
        Audios
    ).leftJoin(
        Album_Audio, eq(Album_Audio.idAudio, Audios.idAudio)
    ).innerJoin(
        Album, eq(Album_Audio.idAlbum, Album.idAlbum)
    ).innerJoin(
        Artista, eq(Album.idArtista, Artista.idArtista)
    ).innerJoin(
        Usuario, eq(Artista.idUsuario, Usuario.id)
    )
);

const posicionRandom = Math.floor(Math.random() * audios.length)
const audio = audios.at(posicionRandom)
  
const cookies = Astro.request.headers.get('cookie')
const userActivo = await getUserActivo(cookies)
const idNormal = (await db.select({idNormal: Normal.idNormal}).from(Normal).where(eq(Normal.idUsuario, userActivo)))[0].idNormal
const cancionesFavs = await db.select({idAudio: Playlist_Audio.idAudio}).from(Playlist).where(and(
    eq(Playlist.nombre, "Canciones favoritas"),
    eq(Playlist.usuarioID, idNormal)
)).leftJoin(
    Playlist_Audio,
    eq(Playlist_Audio.idPlaylist, Playlist.idPlaylist)
)

console.log(cancionesFavs);

---

<div transition:persist id="container" class="w-[95%] min-h-[75px] sm:h-[110px] md:h-max sm:w-full bg-orange-200 sticky bottom-1 mx-auto sm:bottom-0 rounded-lg sm:rounded-none">
    <div id="tarjeta" class="flex justify-between flex-wrap w-[95%] mx-auto py-2">
        <div class="info flex order-1 md:order-1 w-2/4 md:w-1/3 items-center">
            <div class="imagen w-12 sm:w-14 lg:w-16">
                <img id="imagen" class="w-12 sm:w-14 lg:w-16" src={audio.Audios.rutaImagen} alt="Imagen">
            </div>
            <div class="info w-8/12 ml-2">
                <p class="font-bold text-sm md:text-base" id="nombre">{audio.Audios.nombreAudio}</p>
                <p class="text-xs md:text-sm" id="artista">{audio.Usuario.nombre} {audio.Usuario.apellidos}</p>
            </div>
        </div>
        <div class="reproductor mt-2 order-3 md:order-2 w-full md:w-1/3 flex justify-between"> 
            <div class="w-full flex justify-between items-center">
                <span id="nowTimeMusic" class="w-2/12 hidden sm:inline text-right mr-2">00:00</span>
                <div id="containerPointer" class="w-full sm:w-8/12 h-2 flex items-center relative">
                    <progress id="musicProgress" class="w-full h-full relative" value="0" max="0"></progress>
                    <div id="pointTimeMusic" class="w-3 h-3 rounded-full bg-red-500 absolute -left-0.5 hover:transform hover:scale-125 cursor-pointer" draggable="true"></div>
                </div>
                <span id="endTimeMusic" class="w-2/12 hidden sm:inline ml-2">00:00</span>
            </div>
        </div>
        <div class="controles order-2 md:order-3 w-1/3 flex justify-end items-center">
            <button id="addFavorite">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="1.5" class="w-8 h-8 fill-none stroke-red-500">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z" />
                </svg>                                      
            </button>
            <button id="previousSong">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-8 h-8">
                    <path stroke-linecap="round" stroke-linejoin="round" d="m11.25 9-3 3m0 0 3 3m-3-3h7.5M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                </svg>                      
            </button>
            <button id="playSong">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-8 h-8">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                    <path stroke-linecap="round" stroke-linejoin="round" d="M15.91 11.672a.375.375 0 0 1 0 .656l-5.603 3.113a.375.375 0 0 1-.557-.328V8.887c0-.286.307-.466.557-.327l5.603 3.112Z" />
                </svg>                                           
            </button>
            <button id="pauseSong" class="hidden">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-8 h-8">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M14.25 9v6m-4.5 0V9M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                </svg>                                                                 
            </button>
            <button id="nextSong">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-8 h-8">
                    <path stroke-linecap="round" stroke-linejoin="round" d="m12.75 15 3-3m0 0-3-3m3 3h-7.5M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                </svg>
            </button>
        </div>
        <audio id="audio" src={audio.Audios.rutaSonido} data-timereproduced="0" data-timelastpaused="0" data-reproducido="false" data-idaudio={audio.Audios.idAudio} data-posicioncola={posicionRandom}></audio>
    </div>
</div>

<script is:inline data-astro-rerun>
    if( document.getElementById("playAudio") )
    {
        const same = mismaCancion()
        if (same) {
            if(!document.getElementById("audio").paused)
            {
                document.getElementById("playAudio").classList.toggle("hidden")
                document.getElementById("pauseAudio").classList.toggle("hidden") 
            }
        }

        document.getElementById("playAudio").addEventListener("click", () => {
            //audiosScript = eliminarCola()
            document.getElementById('playSong').classList.add('hidden')
            document.getElementById('pauseSong').classList.remove('hidden')
            document.getElementById('playAudio').classList.add('hidden')
            document.getElementById('pauseAudio').classList.remove('hidden')

            const rutaImagen = document.getElementById('imagenPortada').src
            const rutaSonido = document.getElementById("playAudio").dataset.rutasonido
            const tituloCancion = document.getElementById('tituloCancion').innerText
            const artistaCancion = document.getElementById('artistaCancion').innerText

            const audioElement = document.getElementById('audio')
            if( rutaSonido != audioElement.src)
            {
                const idAudio = document.location.href.split("?")[1].split("=")[1]
                const nombreElement = document.getElementById('nombre')
                const artistaElement = document.getElementById('artista')
                const imagenElement = document.getElementById('imagen')

                nombreElement.innerHTML = tituloCancion
                artistaElement.innerHTML = artistaCancion
                imagenElement.setAttribute("src", rutaImagen)
                audioElement.setAttribute("src", rutaSonido)
                audioElement.dataset.posicioncola = 0
                audioElement.dataset.idaudio = idAudio

                if (existeCancionFavorita(idAudio))
                    cambiarEstilosCorazon()
            }
            
            audioElement.play()
        })

        document.getElementById("pauseAudio").addEventListener("click", () => {
            const audioElement = document.getElementById('audio')
            audioElement.pause()

            document.getElementById('playSong').classList.remove('hidden')
            document.getElementById('pauseSong').classList.add('hidden')
            document.getElementById('playAudio').classList.remove('hidden')
            document.getElementById('pauseAudio').classList.add('hidden')
        })
    }

    function mismaCancion() {
        const idAudioURL = document.location.href.split('?')[1].split('=')[1]
        const idAudioReproductor = document.getElementById("audio").dataset.idaudio

        console.log(idAudioURL);            
        console.log(idAudioReproductor);        

        return idAudioURL == idAudioReproductor
    }

    function eliminarCola() {
        return audiosScript.splice(0,0)
    }
</script>

<script is:inline>
    //let audiosScript = audios
    //const progressElement = document.getElementById('musicProgress')
    document.getElementById("addFavorite").addEventListener("click", async () => {
        cambiarEstilosCorazon()

        const idAudio = document.getElementById("audio").dataset.idaudio
        const existe = await existeCancionFavorita(idAudio)
        console.log(existe);
        
        if(existe)
            eliminarCancionFavorita(idAudio)
        else
            agregarCancionFavorita(idAudio)
    })

    async function agregarCancionFavorita(idAudio) {
        const cantidad = document.getElementById("cantidadAudiosFavoritos").innerText
        document.getElementById("cantidadAudiosFavoritos").innerText = +(cantidad) + 1

        const body = new FormData()
        body.append('idAudio', idAudio)

        await fetch('api/meGustas/addFavoriteAudio', {
            body,
            method: 'POST'
        }).then(
            res => console.log(res.status)   
        ).catch(
            error => console.error(error)
        )
    }
    
    async function eliminarCancionFavorita(idAudio) {
        const cantidad = document.getElementById("cantidadAudiosFavoritos").innerText
        document.getElementById("cantidadAudiosFavoritos").innerText = +(cantidad) - 1

        const body = new FormData()
        body.append('idAudio', idAudio)

        await fetch('api/meGustas/removeFavoriteAudio', {
            body,
            method: 'POST'
        }).then(
            res => console.log(res.status)   
        ).catch(
            error => console.error(error)
        )
    }

    async function existeCancionFavorita(idAudio) {
        const existe = await fetch('api/meGustas/getExisteFavoriteAudio?idAudio=' + idAudio)
                                .then(
                                    res => res.json()
                                ).then(
                                    json => json
                                )
                                .catch(
                                    _ => false
                                )

        return existe
    }

    function cambiarEstilosCorazon() {
        const icono = document.getElementById("addFavorite").querySelector("svg")

        if(icono.classList.contains("fill-none"))
        {
            icono.classList.add("fill-red-500")
            icono.classList.remove("fill-none")
        }
        else
        {
            icono.classList.add("fill-none")
            icono.classList.remove("fill-red-500")
        }
    }

    function mismaCancion() {
        const idAudioURL = document.location.href.split('?')[1].split('=')[1]
        const idAudioReproductor = document.getElementById("audio").dataset.idaudio      

        return idAudioURL == idAudioReproductor
    }

    function convertSecToMinSec(sec) {
        const minutes = Math.trunc(sec / 60).toString().padStart(2, 0);
        const seconds = Math.trunc(sec % 60).toString().padStart(2, 0);

        return [minutes, seconds]
    }

    document.getElementById('audio').addEventListener('loadedmetadata', (e) => {
        console.log(e.target.duration);

        const timeAudio = convertSecToMinSec(e.target.duration);

        const musicProgress = document.getElementById('musicProgress')
        musicProgress.max = e.target.duration

        const timeEndMusic = document.getElementById('endTimeMusic')
        timeEndMusic.innerHTML = `${timeAudio[0]}:${timeAudio[1]}`
    });

    document.getElementById('audio').addEventListener('ended', (e) => {
        e.target.dataset.reproducido = "false"

        document.getElementById('pauseSong').classList.add('hidden')
        document.getElementById('playSong').classList.remove('hidden')        

        if( document.getElementById("playAudio") && mismaCancion())
        {
            document.getElementById('playAudio').classList.remove('hidden')
            document.getElementById('pauseAudio').classList.add('hidden')
        }
        
        siguienteCancion(audiosScript)
    });

    document.getElementById('audio').addEventListener('timeupdate', (e) => {

        if ( e.target.dataset.reproducido == "false" && !e.target.paused ) 
        {
            const timeReproducidoLastPaused = +(e.target.currentTime) - +(e.target.dataset.timelastpaused)
            console.log(timeReproducidoLastPaused);

            if (timeReproducidoLastPaused > 10 && e.target.dataset.reproducido == "false")
            {
                const timeReproducidoTotal = +(e.target.dataset.timereproduced) + timeReproducidoLastPaused
                e.target.dataset.timereproduced = timeReproducidoTotal
            }

            if (+(e.target.dataset.timereproduced) > 10)
            {
                e.target.dataset.reproducido = "true"
                añadirRegistroEscucha(e)
            }
        }

        const timeAudio = convertSecToMinSec(e.target.currentTime);

        const musicProgress = document.getElementById('musicProgress')
        musicProgress.value = e.target.currentTime
        
        const timeNowMusic = document.getElementById('nowTimeMusic') 
        timeNowMusic.innerHTML = `${timeAudio[0]}:${timeAudio[1]}`

        const px = (musicProgress.offsetWidth * e.target.currentTime) / musicProgress.max
        const pointer = document.getElementById('pointTimeMusic')

        pointer.style.left = (px - 2) + 'px'; //Restar 3 pixeles estaría mejor
    });

    document.getElementById('nextSong').addEventListener('click', (e) => {
        console.log('Next song');

        e.target.dataset.reproducido = "false"
        siguienteCancion(audiosScript)
    });

    document.getElementById('previousSong').addEventListener('click', (e) => {
        console.log('Previous song');
        
        e.target.dataset.reproducido = "false"
        anteriorCancion(audiosScript)
    });

    document.getElementById('playSong').addEventListener('click', () => {
        console.log('Play song');

        const audio = document.getElementById('audio')
        audio.play()
        document.getElementById('playSong').classList.add('hidden')
        document.getElementById('pauseSong').classList.remove('hidden')

        if( document.getElementById("playAudio") && mismaCancion())
        {
            document.getElementById('playAudio').classList.add('hidden')
            document.getElementById('pauseAudio').classList.remove('hidden')
        }
    });

    document.getElementById('pauseSong').addEventListener('click', () => {
        console.log('Pause song');

        if (document.getElementById('audio').dataset.reproducido == "false") {
            const timeReproducidoLastPaused = +(document.getElementById('audio').currentTime) - +(document.getElementById('audio').dataset.timelastpaused)
            console.log(timeReproducidoLastPaused);
            const timeReproducidoTotal = +(document.getElementById('audio').dataset.timereproduced) + timeReproducidoLastPaused
            document.getElementById('audio').dataset.timereproduced = timeReproducidoTotal

            document.getElementById('audio').dataset.timelastpaused = document.getElementById('audio').currentTime

            console.log(document.getElementById('audio').dataset.timereproduced);
            console.log(document.getElementById('audio').dataset.timelastpaused);
        }

        

        const audio = document.getElementById('audio')
        audio.pause()
        document.getElementById('pauseSong').classList.add('hidden')
        document.getElementById('playSong').classList.remove('hidden')        

        if( document.getElementById("playAudio") && mismaCancion())
        {
            document.getElementById('playAudio').classList.remove('hidden')
            document.getElementById('pauseAudio').classList.add('hidden')
        }
    });

    document.getElementById('pointTimeMusic').addEventListener('dragstart', (e) => {
        e.preventDefault();
    });

    document.getElementById('pointTimeMusic').addEventListener('mousedown', (e) => {
        e.preventDefault();

        if (!document.getElementById('audio').paused)
        {
            document.getElementById('playSong').classList.toggle('hidden')
            document.getElementById('pauseSong').classList.toggle('hidden')
        }

        document.getElementById('audio').pause()

        const container = document.getElementById('containerPointer')
        const pointer = document.getElementById('pointTimeMusic')

        const shiftX = e.clientX - pointer.getBoundingClientRect().left;

        function moveOn(e) {
            let newLeft = e.clientX - shiftX - container.getBoundingClientRect().left;

            // the pointer is out of slider => lock the thumb within the bounaries
            if (newLeft < 0) {
            newLeft = 0;
            }
            const rightEdge = container.offsetWidth;
            if (newLeft > rightEdge) {
            newLeft = rightEdge;
            }

            pointer.style.left = newLeft + 'px';

            const musicProgress = document.getElementById('musicProgress')
            const seg = (newLeft * musicProgress.max) / musicProgress.offsetWidth

            musicProgress.value = seg
            document.getElementById('audio').currentTime = seg
        }

        function onMouseMove(e) {
            moveOn(e);
        }

        function onMouseUp() {   
            document.removeEventListener('mousemove', onMouseMove);
            document.removeEventListener('mouseup', onMouseUp);
            document.getElementById('audio').play()
            document.getElementById('playSong').classList.toggle('hidden')
            document.getElementById('pauseSong').classList.toggle('hidden')
            document.getElementById('audio').dataset.timelastpaused = document.getElementById('audio').currentTime
        }

        document.addEventListener('mousemove', onMouseMove);
        document.addEventListener('mouseup', onMouseUp);
    });

    function anteriorCancion() {
        // Modificar la tarjeta para que aparezca la nueva imagen
        const nombreElement = document.getElementById('nombre')
        const artistaElement = document.getElementById('artista')
        const imagenElement = document.getElementById('imagen')
        const audioElement = document.getElementById('audio')
    
        let posicionColaAnterior = +(audioElement.dataset.posicioncola) - 1
        posicionColaAnterior = posicionColaAnterior == -1 ? audiosScript.length-1 : posicionColaAnterior
        const audio = audiosScript[posicionColaAnterior];

        nombreElement.innerHTML = audio.Audios.nombreAudio
        artistaElement.innerHTML = audio.Usuario.username
        imagenElement.setAttribute("src", audio.Audios.rutaImagen)
        audioElement.setAttribute("src", audio.Audios.rutaSonido)
        if (existeCancionFavorita(audio.Audios.idAudio))
            cambiarEstilosCorazon()
        audioElement.dataset.posicioncola = `${posicionColaAnterior}`
        audioElement.play()  

        document.getElementById('pauseSong').classList.add('hidden')
        document.getElementById('playSong').classList.remove('hidden')
    }

    function siguienteCancion() {
        // Modificar la tarjeta para que aparezca la nueva imagen
        const nombreElement = document.getElementById('nombre')
        const artistaElement = document.getElementById('artista')
        const imagenElement = document.getElementById('imagen')
        const audioElement = document.getElementById('audio')

        let posicionColaSiguiente = +(audioElement.dataset.posicioncola) + 1
        posicionColaSiguiente = posicionColaSiguiente == audiosScript.length ? 0 : posicionColaSiguiente
        const audio = audiosScript[posicionColaSiguiente];

        nombreElement.innerHTML = audio.Audios.nombreAudio
        artistaElement.innerHTML = audio.Usuario.username
        imagenElement.setAttribute("src", audio.Audios.rutaImagen)
        audioElement.setAttribute("src", audio.Audios.rutaSonido)
        audioElement.dataset.posicioncola = `${posicionColaSiguiente}`
        audioElement.play()

        if (existeCancionFavorita(audio.Audios.idAudio))
            cambiarEstilosCorazon()

        document.getElementById('pauseSong').classList.add('hidden')
        document.getElementById('playSong').classList.remove('hidden')
    }

    function añadirRegistroEscucha(e) {
        console.log("Contar como reproducido");

        const audio = document.getElementById('audio')
        const idAudio = audio.dataset.idaudio

        const body = new FormData()
        body.append('idAudio', idAudio)
        fetch('api/reproducciones/nuevaReproduccion', {
            method: "POST",
            body
        }).then(
            res => console.log(res)
        ).catch(
            error => console.log(error)
        )
    }

</script>