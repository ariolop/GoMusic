---
import './../css/output.css'
import { Audios, Artista, Album, Usuario, Album_Audio } from 'astro:db';
import { db, eq } from 'astro:db';

const audios = (
    await db.select().from(
        Audios
    ).leftJoin(
        Album_Audio, eq(Album_Audio.idAudio, Audios.idAudio)
    ).innerJoin(
        Album, eq(Album_Audio.idAlbum, Album.idAlbum)
    ).innerJoin(
        Artista, eq(Album.idArtista, Artista.idArtista)
    ).innerJoin(
        Usuario, eq(Artista.idUsuario, Usuario.id)
    )
);

const randomPositionsCartas = []
const randomPositionsRecomendaciones1 = []
const randomPositionsRecomendaciones2 = []


const cantidadAudios = audios.length

while(randomPositionsCartas.length != 6)
{
    const numAlea = Math.floor(Math.random() * cantidadAudios)
    if (!randomPositionsCartas.includes(numAlea))
        randomPositionsCartas.push(numAlea) 
}

while(randomPositionsRecomendaciones1.length != 5)
{
    const numAlea = Math.floor(Math.random() * cantidadAudios)
    if (!randomPositionsCartas.includes(numAlea) && !randomPositionsRecomendaciones1.includes(numAlea))
        randomPositionsRecomendaciones1.push(numAlea) 
}

while(randomPositionsRecomendaciones2.length != 5)
{
    const numAlea = Math.floor(Math.random() * cantidadAudios)
    if (!randomPositionsCartas.includes(numAlea) && !randomPositionsRecomendaciones1.includes(numAlea) && !randomPositionsRecomendaciones2.includes(numAlea))
        randomPositionsRecomendaciones2.push(numAlea) 
}

---

<div transition:persist class="flex h-full w-full sm:w-full flex-wrap flex-col items-center p-4 px-4 md:px-12">
    <!-- 3 Botones para filtrar por Canciones, Podcast o Todo -->
    <div class="flex justify-evenly w-full lg:w-3/4 items-center h-10">
        <button class="bg-gray-200 hover:bg-gray-400 hover:text-white text-sm sm:text-base md:text-lg hover:font-bold w-1/3 sm:w-1/4 sm:max-w-28 mx-1 rounded-full h-fit py-2 px-3">Todos</button>
        <button class="bg-gray-200 hover:bg-gray-400 hover:text-white text-sm sm:text-base md:text-lg hover:font-bold w-1/3 sm:w-1/4 sm:max-w-28 mx-1 rounded-full h-fit py-2 px-3">Canciones</button>
        <button class="bg-gray-200 hover:bg-gray-400 hover:text-white text-sm sm:text-base md:text-lg hover:font-bold w-1/3 sm:w-1/4 sm:max-w-28 mx-1 rounded-full h-fit py-2 px-3">Podcasts</button>
    </div>
    
    <!-- Últimas canciones escuchadas, si no tiene, poner canciones o álbumes randoms -->
    <div id="cartas" class="grid grid-rows-3 grid-cols-2 lg:grid-rows-2 lg:grid-cols-3 w-full gap-4 mt-4 ">
        <a class="flex bg-gray-200 items-center justify-between rounded" href={"audio?id=" + audios[randomPositionsCartas[0]].Audios.idAudio}>
            <div class="w-full flex items-center">
                <img class="rounded-tl rounded-bl w-10 h-10 sm:w-12 sm:h-12 lg:w-14 lg:h-14" src={audios[randomPositionsCartas[0]].Audios.rutaImagen} alt="">
                <p translate="no" class="ml-3 text-xs sm:text-base lg:text-lg font-bold mr-1 text-balance" data-original={audios[randomPositionsCartas[0]].Audios.nombreAudio}>{audios[randomPositionsCartas[0]].Audios.nombreAudio}</p>
            </div>
        </a>
        <a class="flex bg-gray-200 items-center justify-between rounded" href={"audio?id=" + audios[randomPositionsCartas[1]].Audios.idAudio}>
            <div class="w-full flex items-center">
                <img class="rounded-tl rounded-bl w-10 h-10 sm:w-12 sm:h-12 lg:w-14 lg:h-14" src={audios[randomPositionsCartas[1]].Audios.rutaImagen} alt="">
                <p translate="no" class="ml-3 text-xs sm:text-base lg:text-lg font-bold mr-1" data-original={audios[randomPositionsCartas[1]].Audios.nombreAudio}>{audios[randomPositionsCartas[1]].Audios.nombreAudio}</p>
            </div>
        </a>
        <a class="flex bg-gray-200 items-center justify-between rounded" href={"audio?id=" + audios[randomPositionsCartas[2]].Audios.idAudio}>
            <div class="w-full flex items-center">
                <img class="rounded-tl rounded-bl w-10 h-10 sm:w-12 sm:h-12 lg:w-14 lg:h-14" src={audios[randomPositionsCartas[2]].Audios.rutaImagen} alt="">
                <p translate="no" class="ml-3 text-xs sm:text-base lg:text-lg font-bold mr-1" data-original={audios[randomPositionsCartas[2]].Audios.nombreAudio}>{audios[randomPositionsCartas[2]].Audios.nombreAudio}</p>
            </div>
        </a>
        <a class="flex bg-gray-200 items-center justify-between rounded" href={"audio?id=" + audios[randomPositionsCartas[3]].Audios.idAudio}>
            <div class="w-full flex items-center">
                <img class="rounded-tl rounded-bl w-10 h-10 sm:w-12 sm:h-12 lg:w-14 lg:h-14" src={audios[randomPositionsCartas[3]].Audios.rutaImagen} alt="">
                <p translate="no" class="ml-3 text-xs sm:text-base lg:text-lg font-bold mr-1" data-original={audios[randomPositionsCartas[3]].Audios.nombreAudio}>{audios[randomPositionsCartas[3]].Audios.nombreAudio}</p>
            </div>
        </a>
        <a class="flex bg-gray-200 items-center justify-between rounded" href={"audio?id=" + audios[randomPositionsCartas[4]].Audios.idAudio}>
            <div class="w-full flex items-center">
                <img class="rounded-tl rounded-bl w-10 h-10 sm:w-12 sm:h-12 lg:w-14 lg:h-14" src={audios[randomPositionsCartas[4]].Audios.rutaImagen} alt="">
                <p translate="no" class="ml-3 text-xs sm:text-base lg:text-lg font-bold mr-1" data-original={audios[randomPositionsCartas[4]].Audios.nombreAudio}>{audios[randomPositionsCartas[4]].Audios.nombreAudio}</p>
            </div>
        </a>
        <a class="flex bg-gray-200 items-center justify-between rounded" href={"audio?id=" + audios[randomPositionsCartas[5]].Audios.idAudio}>
            <div class="w-full flex items-center">
                <img class="rounded-tl rounded-bl w-10 h-10 sm:w-12 sm:h-12 lg:w-14 lg:h-14" src={audios[randomPositionsCartas[5]].Audios.rutaImagen} alt="">
                <p translate="no" class="ml-3 text-xs sm:text-base lg:text-lg font-bold mr-1" data-original={audios[randomPositionsCartas[5]].Audios.nombreAudio}>{audios[randomPositionsCartas[5]].Audios.nombreAudio}</p>
            </div>
        </a>
    </div>


    <!-- Lo mismo que antes, pero en forma de cuadrado -->
    <div class="flex justify-between w-full mt-4 flex-wrap">
        <h3 class="w-full text-xl md:text-2xl mb-2 font-bold">Recomendaciones para ti</h3>
        <div class="w-full grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 lg:grid-rows-1 gap-4 gap-y-6">
            <div class="w-full max-h-min hover:bg-orange-200 rounded-sm transition-colors">
                <a href={"./audio?id=" + audios[randomPositionsRecomendaciones1[0]].Audios.idAudio} class="w-full text-center flex justify-center flex-wrap">
                    <img class="mt-2 w-full max-w-28" src={audios[randomPositionsRecomendaciones1[0]].Audios.rutaImagen} alt="">
                    <p translate="no" class="w-full max-w-28">{audios[randomPositionsRecomendaciones1[0]].Audios.nombreAudio}</p>
                </a>
            </div>
            <div class="w-full hover:bg-orange-200 rounded-sm transition-colors">
                <a href={"./audio?id=" + audios[randomPositionsRecomendaciones1[1]].Audios.idAudio} class="w-full text-center flex justify-center flex-wrap items-center">
                    <img class="mt-2 w-full max-w-28" src={audios[randomPositionsRecomendaciones1[1]].Audios.rutaImagen} alt="">
                    <p translate="no" class="w-full max-w-28">{audios[randomPositionsRecomendaciones1[1]].Audios.nombreAudio}</p>
                </a>
            </div>
            <div class="w-full hover:bg-orange-200 rounded-sm transition-colors">
                <a href={"./audio?id=" + audios[randomPositionsRecomendaciones1[2]].Audios.idAudio} class="w-full text-center flex justify-center flex-wrap items-center">
                    <img class="mt-2 w-full max-w-28" src={audios[randomPositionsRecomendaciones1[2]].Audios.rutaImagen} alt="">
                    <p translate="no" class="w-full max-w-28">{audios[randomPositionsRecomendaciones1[2]].Audios.nombreAudio}</p>
                </a>
            </div>
            <div class="w-full hover:bg-orange-200 rounded-sm transition-colors">
                <a href={"./audio?id=" + audios[randomPositionsRecomendaciones1[3]].Audios.idAudio} class="w-full text-center flex justify-center flex-wrap">
                    <img class="mt-2 w-full max-w-28" src={audios[randomPositionsRecomendaciones1[3]].Audios.rutaImagen} alt="">
                    <p translate="no" class="w-full max-w-28">{audios[randomPositionsRecomendaciones1[3]].Audios.nombreAudio}</p>
                </a>
            </div>
            <div class="w-full hover:bg-orange-200 rounded-sm transition-colors">
                <a href={"./audio?id=" + audios[randomPositionsRecomendaciones1[4]].Audios.idAudio} class="w-full text-center flex justify-center flex-wrap">
                    <img class="mt-2 w-full max-w-28" src={audios[randomPositionsRecomendaciones1[4]].Audios.rutaImagen} alt="">
                    <p translate="no" class="w-full max-w-28">{audios[randomPositionsRecomendaciones1[4]].Audios.nombreAudio}</p>
                </a>
            </div>
        </div>
    </div>

    <!-- Lo mismo que antes, pero en forma de cuadrado -->
    <div class="flex justify-between w-full mt-4 flex-wrap">
        <h3 class="w-full text-xl md:text-2xl mb-2 font-bold">Recomendaciones para ti</h3>
        <div class="w-full grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 lg:grid-rows-1 gap-4 gap-y-6">
            <div class="w-full">
                <a href={"./audio?id=" + audios[randomPositionsRecomendaciones2[0]].Audios.idAudio} class="w-full text-center flex justify-center flex-wrap">
                    <img class="w-full max-w-28" src={audios[randomPositionsRecomendaciones2[0]].Audios.rutaImagen} alt="">
                    <p translate="no" class="w-full max-w-28">{audios[randomPositionsRecomendaciones2[0]].Audios.nombreAudio}</p>
                </a>
            </div>
            <div class="w-full">
                <a href={"./audio?id=" + audios[randomPositionsRecomendaciones2[1]].Audios.idAudio} class="w-full text-center flex justify-center flex-wrap">
                    <img class="w-full max-w-28" src={audios[randomPositionsRecomendaciones2[1]].Audios.rutaImagen} alt="">
                    <p translate="no" class="w-full max-w-28">{audios[randomPositionsRecomendaciones2[1]].Audios.nombreAudio}</p>
                </a>
            </div>
            <div class="w-full">
                <a href={"./audio?id=" + audios[randomPositionsRecomendaciones2[2]].Audios.idAudio} class="w-full text-center flex justify-center flex-wrap">
                    <img class="w-full max-w-28" src={audios[randomPositionsRecomendaciones2[2]].Audios.rutaImagen} alt="">
                    <p translate="no" class="w-full max-w-28">{audios[randomPositionsRecomendaciones2[2]].Audios.nombreAudio}</p>
                </a>
            </div>
            <div class="w-full">
                <a href={"./audio?id=" + audios[randomPositionsRecomendaciones2[3]].Audios.idAudio} class="w-full text-center flex justify-center flex-wrap">
                    <img class="w-full max-w-28" src={audios[randomPositionsRecomendaciones2[3]].Audios.rutaImagen} alt="">
                    <p translate="no" class="w-full max-w-28">{audios[randomPositionsRecomendaciones2[3]].Audios.nombreAudio}</p>
                </a>
            </div>
            <div class="w-full">
                <a href={"./audio?id=" + audios[randomPositionsRecomendaciones2[4]].Audios.idAudio} class="w-full text-center flex justify-center flex-wrap">
                    <img class="w-full max-w-28" src={audios[randomPositionsRecomendaciones2[4]].Audios.rutaImagen} alt="">
                    <p translate="no" class="w-full max-w-28">{audios[randomPositionsRecomendaciones2[4]].Audios.nombreAudio}</p>
                </a>
            </div>
        </div>
    </div>
</div>

<script>
    contenidoResponsive()

    window.addEventListener('resize', () => {
        contenidoResponsive()
    })

    function contenidoResponsive () {
        let caracteres = 12;

        const ancho = window.innerWidth

        switch(true)
        {
            case ancho > 1200:
                caracteres = 20
                break;
            case ancho > 770:
                caracteres = 16
                break;
            case ancho > 640:
                caracteres = 13
                break;
            case ancho > 500:
                caracteres = 14
                break;
        }

        const elementos = document.getElementById("cartas").querySelectorAll("p")

        Array.from(elementos).forEach(parrafo => {
            if(parrafo.innerText.length >= caracteres)
            {
                const contenido = parrafo.dataset.original
                parrafo.innerText = contenido.slice(0, caracteres-2) + "..."
            }
        })
    }
</script>